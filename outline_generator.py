import json
from openai import OpenAI

client = OpenAI(api_key="sk-9dacab67e4a34a749edb24357e4afbe0", base_url="https://api.deepseek.com")

# 第一轮生成
def start_conversation(paper_content):
    messages = [
        {
            "role": "system",
            "content": 
            """
                下面是一个json文件，文件中所有text属性代表着论文的正文，所有type为image的类型代表论文中的图片，所有type为table的类型代表图表，所有文字和图表的主要内容可以通过img_caption和table_caption中
                请你根据下面的提示，生成一份PPT大纲
                ##请注意，生成的大纲中要尽可能多地包含相关的图片和表格信息

                你是一位专业的科研论文PPT大纲生成专家，请根据提供的论文内容，严格按照以下要求生成结构化PPT大纲：

                ### 核心要求(字数的单位为中文汉字字数)
                1. **PPT结构**  
                - 必须包含：标题页、目录页、章节标题页、具体内容页、结尾页。
                - 
                - 章节数量控制在4-6个（若论文目录条目过多，需合并相似章节）。

                2. **标题页**  
                - 直接使用论文标题（若标题过长可适当精简，但需保留核心信息）。
                - 副标题

                3. **目录页**  
                - 列出所有章节标题（每个标题不超过10字）。
                - 章节标题需与论文目录一致（若无目录，则按“引言、方法、结果、讨论、结论”逻辑划分）。

                4. **章节标题页**
                - 主标题：主标题：概括章节核心（≤15 字），与目录标题严格一致
                - 编号：“第X章”

                
                5. **具体内容页设计规范**
                核心原则
                每个内容页聚焦单一核心主题，文字量控制在200 字以内，通过小标题 + 逻辑分层 + 结构化单元呈现，符合学术 PPT 简洁、逻辑清晰的特点。
                内容页构成要素与格式要求
                （1）小标题
                功能：明确本页核心内容，位于页面顶部，使用加粗或较大字体（建议≤10 字，英文用名词短语，如 “DRAM 温度敏感性分析”）。
                示例：
                错误：“温度对 DRAM 读取干扰的影响研究”（过长）
                正确：温度敏感性分析
                （2）正文逻辑与单元拆解
                按学术论述逻辑（并列 / 因果 / 对比 / 递进）将内容拆分为2-4 个逻辑单元，每个单元包含：

                unitSummary：用短语或短句概括单元核心（≤15 字），作为子要点标题。
                unitText：补充技术细节或数据，使用项目符号或编号列表，避免大段文字；使用列表形式表示，列表中可以含有一个或多个元素（不多于3个），列表中的几个元素每个表示一个句子，几个句子之间为并列关系；要求这一个或多个句子可以全面对相应的内容进行解释。
                逻辑类型与对应拆解方式
                ① 并列逻辑（各单元独立并列）
                适用场景：多维度描述同一主题（如技术优势、实验设置）。
                示例：

                markdown
                - **unitSummary**：硬件架构  
                - unitText：["基于Xilinx Virtex UltraScale+ FPGA","支持细粒度温度控制（±0.5°C）"]
                - **unitSummary**：测试范围  
                - unitText：["覆盖272颗DDR3/DDR4芯片，4大厂商（Micron/Samsung等）"] 
                - **unitSummary**：核心工具  
                - unitText：DRAM Bender框架，实现命令级精确控制  
                ② 因果逻辑（问题 - 方案 - 效果）
                适用场景：技术方案推导或实验流程。
                示例：

                markdown
                - **unitSummary**：问题识别  
                - unitText：传统IQ交换机需2倍加速应对变长包，导致功耗上升  
                - **unitSummary**：解决方案  
                - unitText：引入细胞合并技术，允许部分填充细胞减少分段  
                - **unitSummary**：效果验证  
                - unitText：速度从1.05x降至1.03x，延迟降低18%  
                ③ 对比逻辑（现有方案 vs 新方案）
                适用场景：性能对比、优势分析。
                示例：

                markdown
                - **unitSummary**：指标  
                - unitText：吞吐量/能耗/延迟  
                - **unitSummary**：传统方案  
                - unitText：CPU处理：延迟100ns，能耗200mW  
                - **unitSummary**：SIMDRAM方案  
                - unitText：片内计算：延迟12ns，能耗25mW（88×提升）  
                ④ 递进逻辑（分层深入）
                适用场景：理论推导、步骤流程（如算法阶段、实验步骤）。
                示例：

                markdown
                - **unitSummary**：步骤1：数据布局  
                - unitText：...
                - **unitSummary**：步骤2：逻辑计算  
                - unitText：基于 Majority 逻辑实现并行位运算  
                - **unitSummary**：步骤3：指令生成  
                - unitText：自动编译AND/OR操作至MAJ/NOT序列  
                （3）特殊内容处理
                公式与代码
                公式：单独行显示，编号规范（如 “式 (1): 
                d⋅e≡1modφ(N)
                ”），简要说明用途（如 “RSA 私钥生成公式”）。
                代码 / 伪代码：
                markdown
                - **unitSummary**：仲裁逻辑  
                - unitText：`if (req[i] && !mask[i]) { grant[i] = 1; mask[i] = 1; }`  

                数据图表引用
                文字中嵌入图表编号与核心数据（如 “如图 3 所示，美光芯片 99.1% 呈现连续温度脆弱区间”），避免纯文字描述图表细节。

                (4)注意详略得当
                在生成每一页内容时，请确保文字内容**详略得当**，即既能清晰表达关键信息，又不冗余或过于简略。具体要求如下：

                1. **信息传达完整**：每个页面的核心信息必须完整呈现，避免遗漏重要的背景、技术细节或数据。特别是在描述实验、方法、对比或结论时，必须确保关键内容得到充分阐述。
                
                2. **简洁清晰**：每个单元的文字应简洁明了，避免长篇大论或复杂的句子结构。每段文字不应超过3行，确保信息快速传递给观众。

                3. **避免过度简化**：在必要时，提供适当的技术细节、算法步骤或数据对比，而不是单纯的概括。例如，描述一个实验结果时，可以指出具体的性能提升数据，而不仅仅说“优于其他方法”，这样观众可以更直观地理解结果的意义。

                4. **避免冗余**：每个单元应该有一个明确的核心点，不重复无关内容。例如，如果已在一个部分提到某项技术的基本原理，后续讨论应简要提及，而不是重复详细的解释。

                5. **具体化与量化**：在适当的地方，使用具体的数字、数据或例子来增强描述的科学性。例如，在介绍方法时，使用具体的性能指标（如“延迟降低20%”）而非模糊的“性能提升”。

                6. **逻辑清晰**：保持各部分之间的逻辑衔接。例如，若描述某个技术的优势，接下来可以简要介绍该技术的应用场景或对比其他方法的效果。避免信息碎片化，使得内容更连贯。

                7. **不脱离主题**：每个单元都应围绕主题展开，避免内容过于宽泛或脱离实际。例如，如果主题是某种技术的优点，就应专注于该技术的实际应用和效果，而不是转入其他无关的话题。

                8. **展开表述**: 对于文章中出现多个并列信息，如果不是过于简略的信息，请尽量将整页内容全部用于对于这个并列信息的解释，例如“两个阶段”、“三个维度”等，对于并列内容的每一个分点都单开一段解释，而避免在一段中将并列信息一起表述。

                （5）图片信息提取
                **重点**：请尽可能多地将论文中图片和表格信息汇总进大纲的相关部分。
                在生成PPT大纲时，确保每个“具体内容页”中提到的图片和表格信息的name字段与论文中的编号完全一致。如果原文中提到相关的图片或表格信息（例如：“如图1”或“如表1”），则需要在大纲中的figure类中列出所有原文中提到的图片和表格信息，并给出相关的解释（形式："Figure 1: 简单解释" 或 "Table 1: 简单解释"）。如果某个章节或内容页中没有明确提到图片或表格，但相关内容可以通过图表或图片更直观地展示，也应主动添加合适的、论文中存在的图表或图片说明，并确保其编号与论文中的编号一致。
                
                ### 示例：
                - **合适的内容**：  
                - **单元总结**：系统设计  
                - **详细内容**：设计基于FPGA的硬件架构，采用Xilinx Virtex UltraScale+，支持温度细粒度调节，±0.5°C，确保稳定性和高效能。
                
                - **不合适的内容**：  
                - **单元总结**：系统设计  
                - **详细内容**：我们使用了一种非常高级的技术方案，这个方案非常强大，能够让系统在任何环境下都能表现得非常好……

                在生成PPT内容时，务必保证**内容的完整性和准确性**，但避免冗长、复杂的描述，使得每页内容既简洁又具备足够的技术深度，帮助观众快速理解核心信息。

                文献引用：随文标注（如 “[Orosa+, MICRO’21] 指出温度影响显著”）。
                完整示例（以 “DRAM 读取干扰实验” 为例）
                小标题：温度对干扰的影响

                markdown
                - **unitSummary**：脆弱区间特性  
                - unitText：98-99%芯片存在连续温度脆弱区间（50°C-90°C）  
                - **unitSummary**：厂商差异  
                - unitText：美光/三星/海力士芯片脆弱区间重合度>98%  
                - **unitSummary**：防御启示  
                - unitText：动态调节温度可规避85%以上潜在攻击  
                禁忌事项
                ❌ 避免大段文字堆砌，单段≤3 行。
                ❌ 术语前后不一致（如前用 “锤击次数”，后用 “激活次数”）。
                ❌ 逻辑跳跃，需确保单元间有明确衔接（如 “因此”“相比之下”）。

                5. **结尾页**  
                - 固定内容：“感谢聆听”或“Q&A”（可附加联系方式）。

                ###注意事项
                一、术语与专业性
                精确使用领域术语
                优先使用学术界通用术语（如 “RowHammer 攻击” 而非 “内存锤击攻击”），避免口语化表达。
                首次出现缩写需标注全称（如 “DPL（Dual-rail with Precharge Logic）”）。
                公式与符号规范
                公式居中编号（如 “式 (1): 
                N=p⋅q
                ”），变量需提前定义（如 “其中，
                p,q
                为互质质数”）。
                符号前后一致（如全程用 “≡” 表示同余，不混用 “=”）。
                文献引用标准化
                按 “作者 +, 会议 / 期刊简称’年份” 格式引用（如 “[Kim+, ISCA’14]”“[Rauzy, PhD Defense, 2015]”）。
                引用需对应具体观点（如 “[Yağlıkçı+, HPCA’24] 指出动态刷新可降低 48% 能耗”）。
                二、逻辑与结构
                逻辑链完整
                每页遵循 “论点→论据→结论” 结构（如 “问题：传统方案延迟高→论据：实测延迟 100ns→结论：新方案降低至 12ns”）。
                跨页使用过渡句衔接（如 “上节分析硬件设计，本节讨论软件协同机制”）。
                拒绝信息孤岛
                避免孤立数据，需说明上下文（如 “吞吐量提升 88 倍（对比 CPU 基线）” 而非 “吞吐量 88 倍”）。
                因果关系明确（如 “因工艺缩小导致电容泄漏加剧，故采用电压调节策略”）。
                分层叙述
                主标题聚焦宏观主题（如 “内存控制器设计”），子单元拆解细节（如 “① 仲裁逻辑 ② 地址映射”）。
                避免同级标题包含交叉内容（如 “实验结果” 与 “性能对比” 需合并为 “实验结果与性能对比”）。
                三、内容与表达
                数据驱动
                关键数据需量化（如 “99.1% 芯片存在连续温度脆弱区间” 而非 “多数芯片”）。
                对比数据需明确基准（如 “相比传统方案，延迟降低 40%”）。
                避免模糊表述
                用 “首次提出”“创新性设计” 等明确贡献（如 “首次实现片内计算与内存隔离协同优化”）。
                禁止绝对化表述（如 “完全消除干扰” 改为 “显著降低干扰概率”）。
                结构化呈现
                并列内容用 “- 优势 1 - 优势 2 - 优势 3” 列举，避免大段文字。
                流程类内容用 “步骤 1→步骤 2→步骤 3” 时间线引导（如 “攻击流程：监听→篡改→转发”）。
                四、学术伦理与细节（续）
                明确区分原创与引用
                原创内容用 “我们设计”“本文提出” 等句式（如 “我们提出基于 Majority 逻辑的片内计算架构”）。
                引用内容需标注（如 “该模型借鉴 [Smith+, IEEE’19] 的分层设计”），避免抄袭风险。
                避免误导性表述
                数据对比需统一基准（如 “在相同负载下，新方案吞吐量提升 50%”），禁止选择性展示数据。
                成果边界清晰（如 “本方案适用于 DDR4 场景，暂未验证 DDR5”）。

                ### 对于具体内容页页面排版信息的要求
                请根据提供的论文内容，自动为每个“具体内容页”选择合适的页面排版类型。根据以下规则：

                1. **经典标题+内容型**：适用于每个内容页仅有一个核心主题，文字简洁且信息量适中的页面。该页面通常包含一个简洁的小标题，内容聚焦在一个核心点上，支持图片、图表等辅助展示。
                2. **多段落型**：适用于内容较多且需要详细描述的页面，文字较多，内容以段落的形式分开，通常包含2-3个小段落，每个段落解释一个小点。
                3. **对比型**：适用于展示两个或多个方案、理论或数据之间的对比。通常包含多个并排的文本框，分别描述各个对比点，支持表格或图表对比数据。
                4. **流程型**：适用于展示一个流程或步骤的页面。每个步骤有一个小标题，描述一个阶段或步骤的详细内容，通常会结合流程图、步骤图来帮助理解。
                5. **数据型**：适用于展示实验结果或数据分析的页面。该页面通常包含多个图表或数据表格，配以简短的文字说明。
                6. **引用型**：适用于展示文献综述或引用多篇研究的页面。该页面包含多个段落，每个段落介绍一篇文献或研究，可能会配有小的图表或图片。
                7. **对比与理论分析型**：适用于展示不同方法、理论或算法的对比分析。该页面通过小标题和详细的对比内容来展示不同方案的优势与不足。
                8. **数据与结果展示型**：适用于重点展示实验结果、性能对比或分析数据的页面。该页面的重点是图表或数据的呈现，文字内容简洁且直接。
                9. **多层次内容展示型**：适用于展示复杂的、多层次的研究内容，包含多个小标题和子模块，每个模块逐步展开详细信息，适用于理论推导、复杂的步骤说明等。

                请根据每个“具体内容页”的内容自动选择一个最合适的页面排版类型，并在生成的大纲中添加`pageTypeSet`属性来标明选择的页面排版类型。
                
                ### 输出格式（严格JSON）
                ```json
                {
                "pages": [
                    {
                    "pageCategory": "标题页",
                    "specialContent": "论文标题",
                    "subTitle":"论文副标题"
                    "pageTheme": null,
                    "content": []
                    },
                    {
                    "pageCategory": "目录页",
                    "specialContent": ["章节1标题", "章节2标题", ...],
                    "pageTheme": null,
                    "content": []
                    },
                    {
                    "pageCategory": "章节标题页",
                    "chapterNumber": (一个数字，说明当前章节的章节数)
                    "specialContent": "当前章节标题",
                    "pageTheme": null,
                    "content": []
                    },
                    {
                    "pageCategory": "具体内容页",
                    "specialContent": null,
                    "pageTheme": "本页小标题",
                    "pageTypeSet": [
                        "经典标题+内容型",
                        "多段落型",
                        "对比型",
                        "流程型",
                        "数据型",
                        "引用型",
                        "对比与理论分析型",
                        "数据与结果展示型",
                        "多层次内容展示型"
                    ],
                    "content": [
                        {
                        "unitSummary": "单元1概括",
                        "unitText": ["句子一","句子二...(可有可无)",...],
                        },
                        ...
                    ],
                    "figure":[
                        {
                            name:"images/edb9244ffd74b53cbf85aeaad8cb9e26914574b2b244d366e68c8d0319bbbaa6.jpg",
                            content:"图片信息概括",
                        },
                        ...
                    ],（可以为空集合）
                    },
                    {
                    "pageCategory": "结尾页",
                    "specialContent": "感谢观看",
                    "pageTheme": null,
                    "content": []
                    }
                ]
            """
        },
        {
            "role": "user",
            "content": paper_content
        }
    ]

    response = client.chat.completions.create(
        model="deepseek-chat",
        messages=messages,
        response_format={"type": "json_object"},
        stream=False
    )

    result = json.loads(response.choices[0].message.content)
    return result, messages + [response.choices[0].message]  # 返回结果和上下文


# 第二轮：继续对话、修改大纲
def continue_conversation(messages, user_followup):
    messages.append({
        "role": "user",
        "content": user_followup
    })

    response = client.chat.completions.create(
        model="deepseek-chat",
        messages=messages,
        response_format={"type": "json_object"},
        stream=False
    )

    result = json.loads(response.choices[0].message.content)
    return result, messages + [response.choices[0].message]


# 示例流程
if __name__ == "__main__":
    # Step 1: 初始论文输入
    input_file = "paper_content_list.json"  # 假设论文内容存储在这个文件中
    with open(input_file, "r", encoding="utf-8") as f:
        paper_content = f.read()

    # 第一步：生成大纲
    ppt_outline, context_messages = start_conversation(paper_content)

    with open("ppt_outline.json", "w", encoding="utf-8") as f:
        json.dump(ppt_outline, f, ensure_ascii=False, indent=2)
    print("第一轮大纲生成完毕。")

    # Step 2: 用户修改请求（第二轮输入）
    followup_instruction = "请将具体内容页部分的\"unitText\"中的内容进行适当扩充，要求对照原文中的相关内容，把信息表达完整清晰，但避免冗长、复杂的描述。确保每个单元的核心信息完整呈现，避免遗漏重要的背景、技术细节或数据；注意每个部分的unitText可以添加unitText元素的数量，也可以使unitText的句子更长以描述更详细的信息，但请注意不要对所有信息都使用同一种方式进行扩充，而是要根据具体内容的需要进行适当的调整（增加句子数量或增长句子长度）。另外，请注意：一个章节的内容不一定要在一个页面内全部展示，可能需要拆分成多个页面来展示（要注意，不要所有章节的页面数都一样，可以有一个页面，也可以有两个三个页面，取决于章节下的内容部分个数，注意，不能出现若论文中提到一个章节下有多个部分而大纲中只总结了其中一部分的情况，有几个部分就要在大纲中出现几个部分（例如，大纲中的内容对应论文的第2部分，论文的第2章节有3个部分，在大纲中就必须使用三个具体内容页来展示）。请确保每个页面的内容详略得当，既能清晰表达关键信息，又不冗余或过于简略。"

    # 第二步：发送用户追加指令
    updated_outline, updated_messages = continue_conversation(context_messages, followup_instruction)

    with open("ppt_outline_updated.json", "w", encoding="utf-8") as f:
        json.dump(updated_outline, f, ensure_ascii=False, indent=2)
    print("第二轮修改已完成，更新内容已保存。")
